name: Create Prerelease Draft

on:
  schedule:
    - cron: '0 10 * * 1'
  workflow_dispatch:

jobs:
  draft-prerelease:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3

      - name: Get Date
        id: get-date
        run: |
          delimiter=$(date +'%Y-%m-%d')
          echo "::set-output name=date-string::$delimiter"

      - name: Date to String
        id: date-to-string
        run: |
          delimiter="${{ steps.get-date.outputs.date-string }}"
          echo "::set-output name=date-string::$delimiter"

      - name: Get SHA
        id: get-sha
        run: |
          echo "::set-output name=sha::$(git rev-parse HEAD)"
          echo "::set-output name=short-sha::$(git rev-parse --short HEAD)"

      - name: get variable
        run: |
          echo "${{ steps.get-date.outputs.date-string }}"

      - name: Get version
        id: get-version
        run: |
          VERSION=$(npm run get-version -s)
          echo "::set-output name=version::$VERSION"
          TAG_NAME=$VERSION-${{ steps.get-sha.outputs.short-sha }}
          if [ "$(git ls-remote --exit-code --tags origin $TAG_NAME)" ]; then
            echo "::set-output name=package-version::$TAG_NAME-${{ github.run_number }}"
          else
            echo "::set-output name=package-version::$TAG_NAME"
          fi

      - name: Create tag
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/git/refs
          repo: ${{ github.repository }}
          ref: 'refs/tags/${{ steps.get-version.outputs.package-version }}'
          sha: ${{ steps.get-sha.outputs.sha }}

      - name: Create prerelease
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/releases
          repo: ${{ github.repository }}
          name: ${{ steps.date-to-string.outputs.date-string }}-CUI-v${{ steps.get-version.outputs.version }}
          tag_name: ${{ steps.get-version.outputs.package-version }}
          target_commitish: ${{ steps.get-sha.outputs.sha }}
          generate_release_notes: true
          prerelease: true
          draft: true