name: Create Prerelease

on:
  schedule:
    - cron: '0 12 * * 3'
  workflow_dispatch:
    inputs:
      latest:
        description: 'Check to get current date and time, otherwise default to last Monday'
        type: boolean
        required: false

jobs:
  deploy-staging:
    environment: Staging
    runs-on: ubuntu-latest
    outputs:
      RELEASE_SHA: ${{ steps.get-sha.outputs.sha }}
      MONDAY_DATE: ${{ steps.last-week-monday.outputs.date }}
      GET_VERSION: ${{ steps.get-version.outputs.package-version }}
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3

      - name: Get Recent
        shell: base
        run: |
          delimiter=$(date +'%Y-%m-%d')

      - name: Get Last Week Monday
        id: last-week-monday
        if: "${{ github.event.inputs.level != '' }}"
        shell: bash
        run: |
          if $(date +%u) -lt 2; then
            delimiter=$(date +'%Y-%m-%d' -d "last-monday")
          else
            delimiter=$(date +'%Y-%m-%d' -d "last-monday - 1 week")
          fi
          echo "::set-output name=date::$delimiter"

      - name: Get Last Monday Commits
        id: last-monday-commits
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/commits?per_page=1&until=${{ steps.last-week-monday.outputs.date }}T23:59:59Z
          repo: ${{ github.repository }}

      - name: Get SHA
        id: get-sha
        shell: bash
        run: |
          shortSha=$(echo ${{ fromJson(steps.last-monday-commits.outputs.data)[0].sha }} | cut -c1-7)
          echo "::set-output name=sha::${{ fromJson(steps.last-monday-commits.outputs.data)[0].sha }}"
          echo "::set-output name=short-sha::$shortSha"

      - name: Get version
        id: get-version
        run: |
          echo "::set-output name=package-version::$(npm run get-version -s)-${{ steps.get-sha.outputs.short-sha }}"
      
      - name: Get previous release
        id: previous-release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases/latest
          repo: ${{ github.repository }}

      - name: Create tag
        id: create-tag
        uses: octokit/request-action@v2.x
        continue-on-error: true
        with:
          route: POST /repos/{repo}/git/refs
          repo: ${{ github.repository }}
          ref: 'refs/tags/${{ steps.get-version.outputs.package-version }}'
          sha: ${{ steps.get-sha.outputs.sha }}

      - name: Create alt tag
        if: steps.create-tag.outcome == 'failure'
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.get-version.outputs.package-version }}',
              sha: ${{ steps.get-version.outputs.package-version }}
            })
      
      - name: Generate release notes
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/releases/generate-notes
          repo: ${{ github.repository }}
          tag_name: ${{ steps.get-version.outputs.package-version }}
          previous_tag_name: ${{ fromJson(steps.previous-release.outputs.data).tag_name }}
          target_commitish: ${{ steps.get-sha.outputs.sha }}

  update-staging-manifest:
    environment: Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    env:
      GITHUB_TOKEN: ${{ github.token }}
      RELEASE_SHA: ${{ needs.deploy-staging.outputs.RELEASE_SHA }}

    steps:
      - name: Update Staging Manifest
        run: echo "Updating Staging Manifest"


  update-release-staging:
    environment: Staging
    runs-on: ubuntu-latest
    needs: [deploy-staging, update-staging-manifest]
    env:
      MONDAY_DATE: ${{ needs.deploy-staging.outputs.MONDAY_DATE }}
      RELEASE_SHA: ${{ needs.deploy-staging.outputs.RELEASE_SHA }}
      GET_VERSION: ${{ needs.deploy-staging.outputs.GET_VERSION }}
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Create prerelease
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/releases
          repo: ${{ github.repository }}
          name: ${{ env.MONDAY_DATE }}-Staging-Utility
          tag_name: ${{ env.GET_VERSION }}
          target_commitish: ${{ env.RELEASE_SHA }}
          prerelease: true