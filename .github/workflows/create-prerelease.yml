name: Create Prerelease

on:
  schedule:
    - cron: '0 12 * * 3'
  workflow_dispatch:
    inputs:
      latest:
        description: 'Check to use current date and time, otherwise default to last Monday'
        type: boolean
        required: false
        default: false

jobs:
  deploy-staging:
    environment: Staging
    runs-on: ubuntu-latest
    outputs:
      RELEASE_SHA: ${{ steps.get-sha.outputs.sha }}
      MONDAY_DATE: ${{ steps.last-week-monday.outputs.date }}
      PACKAGE_VERSION: ${{ steps.get-version.outputs.package-version }}
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3

      - name: Get Recent Date
        shell: bash
        if: "${{ github.event.inputs.latest == 'true' }}"
        run: |
          delimiter=$(date +'%Y-%m-%d')

      - name: Get Last Week Monday
        id: last-week-monday
        if: "${{ github.event.inputs.latest == 'false' }}"
        shell: bash
        run: |
          if $(date +%u) -lt 2; then
            delimiter=$(date +'%Y-%m-%d' -d "last-monday")
          else
            delimiter=$(date +'%Y-%m-%d' -d "last-monday - 1 week")
          fi
          echo "::set-output name=date::$delimiter"

      - name: Get Last Monday Commits
        id: last-monday-commits
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/commits?per_page=1&until=${{ steps.last-week-monday.outputs.date }}T23:59:59Z
          repo: ${{ github.repository }}

      - name: Get SHA
        id: get-sha
        shell: bash
        run: |
          shortSha=$(echo ${{ fromJson(steps.last-monday-commits.outputs.data)[0].sha }} | cut -c1-7)
          echo "::set-output name=sha::${{ fromJson(steps.last-monday-commits.outputs.data)[0].sha }}"
          echo "::set-output name=short-sha::$shortSha"

      - name: Get version
        id: get-version
        run: |
          echo "::set-output name=package-version::$(npm run get-version -s)-${{ steps.get-sha.outputs.short-sha }}"

      - name: Create tag
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/git/refs
          repo: ${{ github.repository }}
          ref: 'refs/tags/${{ steps.get-version.outputs.package-version }}'
          sha: ${{ steps.get-sha.outputs.sha }}

  update-staging-manifest:
    environment: Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    env:
      GITHUB_TOKEN: ${{ github.token }}
      RELEASE_SHA: ${{ needs.deploy-staging.outputs.RELEASE_SHA }}
      PACKAGE_VERSION: ${{ needs.deploy-staging.outputs.PACKAGE_VERSION }}

    steps:
      - name: Configure AWS Credentials
        run: |
          echo "running manifest stuff"

  update-release-staging:
    environment: Staging
    runs-on: ubuntu-latest
    needs: [deploy-staging, update-staging-manifest]
    env:
      MONDAY_DATE: ${{ env.MONDAY_DATE }}
      RELEASE_SHA: ${{ env.RELEASE_SHA }}
      PACKAGE_VERSION: ${{ env.PACKAGE_VERSION }}
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Get previous release
        id: previous-release
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases/latest
          repo: ${{ github.repository }}

      - name: Generate release notes
        id: release-notes
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/releases/generate-notes
          repo: ${{ github.repository }}
          tag_name: ${{ steps.get-version.outputs.package-version }}
          previous_tag_name: ${{ fromJson(steps.previous-release.outputs.data).tag_name }}
          target_commitish: ${{ steps.get-sha.outputs.sha }}

      - name: Create prerelease
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/{repo}/releases
          repo: ${{ github.repository }}
          name: ${{ env.MONDAY_DATE }}-Staging-Utility
          tag_name: ${{ env.PACKAGE_VERSION }}
          target_commitish: ${{ env.RELEASE_SHA }}
          body: ${{ fromJson(steps.release-notes.outputs.data).body }}
          generate_release_notes: true
          prerelease: true