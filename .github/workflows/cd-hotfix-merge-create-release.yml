name: Hotfix Merge and Create Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:

  # deploy-to-dev:
  #   # if: needs.get-source-branch.outputs.SOURCE_BRANCH == 'hotfix'
  #   uses: ./.github/workflows/cd-build.yml

  get-current-release-to-delete:
    # needs: deploy-to-dev
    runs-on: ubuntu-latest
    outputs:
      ID: ${{ steps.get-prerelease-id.outputs.value }}
      TAG: ${{ steps.get-prerelease-tag.outputs.value }}
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}
    
      - name: Get releases
        id: get-releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases
          repo: ${{ github.repository }}

      - name: Get prerelease ID
        id: get-prerelease-id
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            cat << EOF > json.txt
            ${{ steps.get-releases.outputs.data }}
            EOF
            sed -e "s/'//g" json.txt > newjson.txt
            JSON=$(cat newjson.txt)
            echo "$JSON" | jq -r 'map(select(.published_at and .prerelease == true)) | first | .id'

      - name: Get prerelease TAG
        id: get-prerelease-tag
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            cat << EOF > json.txt
            ${{ steps.get-releases.outputs.data }}
            EOF
            sed -e "s/'//g" json.txt > newjson.txt
            JSON=$(cat newjson.txt)
            echo "$JSON" | jq -r 'map(select(.published_at and .prerelease == true)) | first | .tag_name'

  delete-current-release:
    needs: get-current-release-to-delete
    if: needs.get-current-release-to-delete.outputs.ID != 'null' && needs.get-current-release-to-delete.outputs.TAG != 'null'
    uses: ./.github/workflows/cd-delete-release-tag.yml
    with:
      id: ${{ needs.get-current-release-to-delete.outputs.ID }}
      tag: ${{ needs.get-current-release-to-delete.outputs.TAG }}
    secrets: inherit

  get-current-drafts-to-delete:
    # needs: deploy-to-dev
    runs-on: ubuntu-latest
    outputs:
      IDMATRIX: ${{ steps.convert-to-json.outputs.IDMATRIX }}
      TAGMATRIX: ${{ steps.convert-to-json.outputs.TAGMATRIX }}
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}

      - name: Get releases
        id: get-releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases
          repo: ${{ github.repository }}
      
      - name: Get prerelease ID
        id: get-prerelease-id
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            cat << EOF > json.txt
            ${{ steps.get-releases.outputs.data }}
            EOF
            sed -e "s/'//g" json.txt > newjson.txt
            JSON=$(cat newjson.txt)
            echo "$JSON" | jq -r 'map(select(.draft == true and .prerelease == true)) | .[] | .id' | tr '\n' ','

      - name: Get prerelease TAG
        id: get-prerelease-tag
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            cat << EOF > json.txt
            ${{ steps.get-releases.outputs.data }}
            EOF
            sed -e "s/'//g" json.txt > newjson.txt
            JSON=$(cat newjson.txt)
            echo "$JSON" | jq -r 'map(select(.draft == true and .prerelease == true)) | .[] |  .tag_name' | tr '\n' ','

      - name: Convert to json
        id: convert-to-json
        run: |
          IDARRAY=$(echo "${{ steps.get-prerelease-id.outputs.value }}" | sed -r 's/(,$)//g' | sed -r 's/,/\\\", \\\"/g' | sed -r 's/(^)/{[\\\"/g' | sed -r 's/($)/\\"]}/g')
          TAGARRAY=$(echo "${{ steps.get-prerelease-tag.outputs.value }}" | sed -r 's/(,$)//g' | sed -r 's/,/\\\", \\\"/g' | sed -r 's/(^)/{[\\\"/g' | sed -r 's/($)/\\"]}/g')
          echo "::set-output name=IDMATRIX::$IDARRAY"
          echo "::set-output name=TAGMATRIX::$TAGARRAY"

  delete-current-drafts-releases:
    needs: [get-current-drafts-to-delete]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        IDMATRIX: ${{fromJson(needs.get-current-drafts-to-delete.outputs.IDMATRIX)}}
    steps:
      - uses: ./.github/workflows/cd-delete-release-tag.yml
        with:
          tag: 'null'
          id: ${{ matrix.IDMATRIX }}
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}

  delete-current-drafts-tags:
    needs: [get-current-drafts-to-delete]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TAGMATRIX: ${{fromJson(needs.get-current-drafts-to-delete.outputs.TAGMATRIX)}}
    steps:
      - uses: ./.github/workflows/cd-delete-release-tag.yml
        with:
          tag: ${{ matrix.TAGMATRIX }}
          id: 'null'
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}

      # - name: Delete prerelease
      #   if: steps.get-prerelease-id.outcome == 'success' && steps.get-prerelease-id.outputs.value != 'null'
      #   uses: octokit/request-action@v2.x
      #   env:
      #     GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      #   with:
      #     route: DELETE /repos/{repo}/releases/{release_id}
      #     repo: ${{ github.repository }}
      #     release_id: ${{ matrix.IDMATRIX }}

      # - name: Delete prerelease tag by tag
      #   if: steps.get-prerelease-tag.outcome == 'success' && steps.get-prerelease-tag.outputs.value != 'null'
      #   uses: octokit/request-action@v2.x
      #   env:
      #     GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      #   with:
      #     route: DELETE /repos/{repo}/git/refs/tags/{ref}
      #     repo: ${{ github.repository }}
      #     ref: ${{ steps.get-prerelease-tag.outputs.value }}
    
  # create-prerelease:
  #   needs: [delete-current-releases, delete-current-drafts]
  #   uses: ./.github/workflows/cd-create-prerelease-draft.yml
  #   secrets: inherit
  #   with:
  #     disable-workflow: false
  #     disable-notes: false