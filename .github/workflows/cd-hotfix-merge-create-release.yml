name: Hotfix Merge and Create Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:

jobs:

  # deploy-to-dev:
  #   if: needs.get-source-branch.outputs.SOURCE_BRANCH == 'hotfix'
  #   uses: ./.github/workflows/cd-build.yml

  delete-current-releases:
    # needs: deploy-to-dev
    runs-on: ubuntu-latest
    
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}

      - name: Get releases
        id: get-releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases
          repo: ${{ github.repository }}

      - name: Sanitize Json
        id: sanitize-json
        shell: bash
        run: |
          cat << EOF > json.txt
          ${{ steps.get-releases.outputs.data }}
          EOF
          sed -e "s/'//g" json.txt > newjson.txt
          JSON=$(echo `cat file.txt`)
          echo "::set-output name=JSON::$JSON"

      - name: print variable
        run: |
          cat '${{ steps.sanitize-json.outputs.JSON }}'

      - name: Get prerelease ID
        id: get-prerelease-id
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            echo "${{ steps.sanitize-json.outputs.JSON }}" | jq -r 'map(select(.published_at and .prerelease == true)) | first | .id'

      - name: Get prerelease TAG
        id: get-prerelease-tag
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            echo "${{ steps.sanitize-json.outputs.JSON }}" | jq -r 'map(select(.published_at and .prerelease == true)) | first | .target_commitish'
      
      - name: print variable
        run: |
          echo "${{ steps.get-prerelease-id.outputs.value }}"
          echo "${{ steps.get-prerelease-tag.outputs.value }}"

      - name: Delete prerelease
        if: steps.get-prerelease-id.outcome == 'success'
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          route: DELETE /repos/{repo}/releases/{release_id}
          repo: ${{ github.repository }}
          release_id: ${{ steps.get-prerelease.outputs.RELEASE_ID  }}

      - name: Delete prerelease tag
        if: steps.get-prerelease-tag.outcome == 'success'
        uses: octokit/request-action@v2.x
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        with:
          route: DELETE /repos/{repo}/git/refs/tags/{ref}"
          repo: ${{ github.repository }}
          reg: ${{ steps.get-prerelease.outputs.RELEASE_TAG  }} 

  delete-current-drafts:
    # needs: deploy-to-dev
    runs-on: ubuntu-latest
    
    env:
      GITHUB_TOKEN: ${{ github.token }}

    steps:
      - name: Generate token
        id: generate-token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.ACTIONS_TOKEN_APP_ID }}
          private_key: ${{ secrets.ACTIONS_TOKEN_PRIVATE_KEY }}

      - name: Get releases
        id: get-releases
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/{repo}/releases
          repo: ${{ github.repository }}

      - name: Get prerelease
        id: get-prerelease
        continue-on-error: true
        uses: sergeysova/jq-action@v2
        with:
          cmd: |
            cat << EOF > json.txt
            ${{ steps.get-releases.outputs.data }}
            EOF
            sed -e "s/'//g" json.txt > newjson.txt
            JSON=$(cat newjson.txt)
            echo "$JSON"
            ReleaseId=echo "$JSON" | jq -r 'map(select(.draft == true and .prerelease == true)) | .[] | .id'
            ReleaseTag=echo "$JSON" | jq -r 'map(select(.draft == true and .prerelease == true)) | .[] | .target_commitish'
            echo "::set-output name=RELEASE_ID::$ReleaseId"
            echo "::set-output name=RELEASE_TAG::$ReleaseTag"
      
      # - name: Delete prerelease
      #   if: steps.get-prerelease.outcome == 'success'
      #   uses: octokit/request-action@v2.x
      #   env:
      #     GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      #   with:
      #     route: DELETE /repos/{repo}/releases/{release_id}
      #     repo: ${{ github.repository }}
      #     release_id: ${{ steps.get-prerelease.outputs.RELEASE_ID  }}

      # - name: Delete prerelease tag
      #   if: steps.get-prerelease.outcome == 'success'
      #   uses: octokit/request-action@v2.x
      #   env:
      #     GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
      #   with:
      #     route: DELETE /repos/{repo}/git/refs/tags/{ref}"
      #     repo: ${{ github.repository }}
      #     reg: ${{ steps.get-prerelease.outputs.RELEASE_TAG  }} 
    
  # create-prerelease:
  #   needs: [delete-current-releases, delete-current-drafts]
  #   uses: ./.github/workflows/cd-create-prerelease-draft.yml
  #   secrets: inherit
  #   with:
  #     disable-workflow: false
  #     disable-notes: false